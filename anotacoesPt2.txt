spring boot parte dois

aula 1 atividade 2 - PAGINAÇÃO
"modificação no método lista dentro do controller para adicionar paginação"
na listagem dos resultados. envolveu adaptação na interface TopicoRepository e 
na classe TopicoDto, método converter.

aula 1 atividade 4 - VANTAGEM DE UTILIZAR A INTERFACE PAGE

> Como vimos no vídeo anterior, foi necessário alterar o retorno do método lista, de List<Topico>, para Page<Topico>. 
Qual a vantagem de devolver um objeto Page, ao invés de um List? 
**Adicionar dados sobre a paginação no JSON de resposta**
Ao utilizar o objeto Page, além de devolver os registros, o Spring também devolve informações sobre a paginação no JSON de resposta , 
como número total de registros e páginas.

aula 1 atividade 5 - ORDENAÇÃO
"melhorada a listagem paginada dentro do controller e atribuída opção de ordenação personalizada dos resultados pelo cliente alterando a lógica do método lista"
foi adicionado o atributo ordenação como RequestParam e dentro do PageRequest.of o "Sort.Direction.ASC" ou "Sort.Direction.DESC" que definem se os registros
serão listados em ordem crescente ou descrescente com relação ao parâmetro de ordenação e o campo "ordenacao" a ser preenchido no corpo do link, assim como
a pagina e qtd.


aula 1 atividade 6 - ORDENANDO REGISTROS NA LISTA

> Vimos que, para ordenar os registros, foi necessário passar um parâmetro com o nome do atributo para realizar a ordenação. 
O que acontece se o nome do atributo informado estiver incorreto?
**Um erro será devolvido ao cliente** (Erro 500 pois o parâmetro não foi encontrado)

aula 1 atividade 7 - SIMPLIFICANDO A PAGINAÇÃO E ORDENAÇÃO
"Substituição dos parâmetros soltos de paginação e ordenação por um parâmetro do objeto Pageable para simplificação, adicionada a anotação @EnableSpringDataWebSupport no ForumApplication e definidos com @PageableDefault valores padrão caso não haja passagem de parâmetros em url pelo cliente"
metodo lista foi modificado para não "pegar" os parametros de pagina, qtd e ordenacao soltos e serem todos definidos pelo parametro "paginacao",
objeto do tipo pageable.  
Para o spring conseguir pegar os parametros de paginação e ordenação da requisição, é necessário que o módulo esteja habilitado no projeto,
o módulo que pega as coisas da web e passa para o Spring Data.
Foi alterada a classe ForumApplication (main do Spring Boot) com a anotação @EnableSpringDataWebSupport sobre a declaração da classe.
Assim foi habilitado o suporte para o Spring pegar da requisição, dos parâmetros da url os campos, informações de paginação e orndenação
e repassar ao Spring Data.
Por conta disso, os parâmetros a serem passados na url agora deverão ser em inglês.
EX:http://localhost:8080/topicos?page=0&size=10&sort=id,asc (sort: ordenação, size: qtd, asc CRESCENTE ou desc DECRESCENTE)
o parâmetro sort pode ser usado mais de uma vez para definir mais de um parâmetro de ordenação.
se não for passado parâmetro de ordenação nem paginacao e quantidade, o spring usa o padrão de ordenação pelo id. mas também é possível definir uma ordem padrão caso ela não 
seja passada na url pelo cliente, através da anotação @PageableDefault com parâmetros sort, direction, page e size preenchidos entre parênteses.

aula 1 atividade 8

> Qual o objetivo da anotação @PageableDefault?
**Indicar o padrão de paginação/ordenação ao Spring, quando o cliente da API não enviar tais informações**

Nesta aula, aprendemos que:

>> Para realizar paginação com Spring Data JPA, devemos utilizar a interface Pageable;
>> Nas classes Repository, os métodos que recebem um pageable como parâmetro retornam objetos do tipo Page<>, ao invés de List<>;
>> Para o Spring incluir informações sobre a paginação no JSON de resposta enviado ao cliente da API, devemos alterar o retorno 
do método do controller de List<> para Page<>;
>> Para fazer a ordenação na consulta ao banco de dados, devemos utilizar também a interface Pageable, passando como parâmetro 
a direção da ordenação, utilizando a classe Direction, e o nome do atributo para ordenar;
>> Para receber os parâmetros de ordenação e paginação diretamente nos métodos do controller, devemos habilitar o módulo 
SpringDataWebSupport, adicionando a anotação @EnableSpringDataWebSupport na classe ForumApplication.

-----------------------------------------------------------------------------------------------------------------------------------------------------------

aula 2 atividade 2 - UTILIZANDO CACHE

Utilização do recurso de Cache para melhorar a performance da API

é necessário adicionar o módulo de cache no spring boot como dependência no mavem no arquivo pom.xml
adicionar um provedor de cache como dependência (quando o projeto estiver em ambiente produção, no curso não será adicionado)
o spring por padrão utiliza um provedor de cache não indicado para uso em produção, em hash map, que utilizaremos.

além de declarar dependência de cache no projeto é necessário habilitar o uso do cache no projeto, 
na classe Forum Application com a anotação "@EnableCaching".
Agora é possível utilizar. e para indicar ao spring que queremos a utilização de cache no método, deve ser adicionada
a anotação "@Cacheable", assim a gente indica que queremos o retorno do método em cache.
DEVE SER ADICIONADA A ANOTAÇÃO DO PACOTE SRPING, NÃO DO JAVAX!!!
A anotação deve ser preenchida com um atributo value, que receberá uma String que será o identificador único desse cacheable
usado para identificação, pois um projeto pode conter mais de um cacheable.
para visualizarmos o funcionamento correto do retorno em cache, será adicionado no arquivo application.properties
nas propriedades da jpa "spring.jpa.properties.hibernate.show_sql=true", que fala para o Hibernate imprimir os comandos
sql cada vez que ele acessar o banco de dados.
por padrão, ele imprime todas as propriedades numa linha só, para a formatação das informações impressas
deverá ser adicionada a seguinte propriedade: "spring.jpa.properties.hibernate.format_sql=true"
após salvar, testamos o envio da requisição no postman. no primeiro envio, é mostrado na Run do ForumApplication do Intellij
a consulta que o hibernate realizou no banco de dados porém ao limpar o Run e executar a requisição novamente, não são
mostrados dados de consulta no banco, pois ele mostra resultados buscados no cache (em memória) da consulta anterior,
o que é mais rápido e fácil que consultar no banco novamente nos proporciona ganho de performance.
***Para cada variação de parâmetro na consulta, o spring guarda o resultado na memória cache, se houver mudança de parâmetro
com um resultado ainda não buscado, o hibernate fará a consulta no banco e salvará o resultado para próximas buscas***


"Utilizando Cache: adicionada dependência no pom.xml, habilitado o uso no ForumApplication, indicado uso no método lista da classe 
TopicosController e adicionadas propriedades de visualização e formatação de consultas no banco no Run pelo Hibernate no application.properties"


aula 2 parte 3 - ANOTAÇÃO @CACHEABLE

> No último vídeo, vimos que a anotação @Cacheable possui o parâmetro value, do tipo String. Para que serve esse parâmetro?
**Para indicar ao Spring o nome do cache associado a um determinado método**
A string passada como parâmetro para a anotação @Cacheable funciona como um identificador único do cache.





